<template>
  <div class="bg" onswipe="exit">
    <!-- biaodan -->
    <list class="bg" style="left: 3px;width: 186px;padding-top:86px;padding-bottom:86px;" id="list">
      <list-item for="{{list}}"style="height: 110px;flex-wrap: wrap;background-color: #262626;margin-bottom:8px;border-radius: 27px;"type="aa" onclick="info({{$idx}})">
        <text style="position: absolute;left:12px;top:12px;width:162px;height: 42px;text-align: left;">{{$item.name}}</text>
        <text style="position: absolute;left: 12px;top: 61px;width: 162px;font-size: 28px;color: #A8A8A8;text-align: left;">{{$item.otp}}</text>
      </list-item>
    </list>
    <img src="/common/nokey.png"style="position: absolute;" if="{{list.length==0}}"/>
    <!-- 渐变遮罩 -->
    <img src="/common/tblack.png"/>
    <img src="/common/bblack.png" style="position: absolute;bottom:0px"/>
    <!-- 详情 -->
    <div class="bg" style='justify-content: center;flex-wrap: wrap;flex-direction: column;align-content: center;'show="{{more_show}}">
        <text>{{more.name}}</text>
        <text if="{{more.usr}}">{{more.usr}}</text>
        <text style="font-size: 40px;">{{more.otp}}</text>
        <text>剩余时间{{timelast}}S</text>
        <img src="/common/del.png"onclick="del()" style="position: absolute;left: 45px; top: 6px;"/>
    </div>
    <progress style="position: absolute;left: 2px;bottom: 4px;center-y:0px;center-x:94px;width: 188px;height: 94px;radius:94px;start-angle:240deg;total-angle:-120deg;stroke-width:10px;background-color: rgba(255, 255, 255, 0.6);;color:white" percent="{{timeProgress}}" type="arc" if="{{list.length!=0}}"></progress> 
    <!-- 关于 -->
    <img src="/common/info.png"onclick="i()" style="position: absolute;left: 45px; top: 6px;"show="{{!ab&&!more_show}}"/>
    <scroll class="bg" show="{{ab}}" scroll-y="true" bounces="true">
			<img src="/common/about.png" />
    </scroll>
    <!--返回-->
    <img src="/common/back.png"onclick="exit('e')" style="position: absolute;left: 45px; top: 6px;"show="{{ab}}"/>
	</div>
</template>
<script>
import {
    TOTP
} from './totp';
import prompt from '@system.prompt'
import interconnect from '@system.interconnect'
import storage from "@system.storage";
let keyInterval, timeInterval, nowi, delTimeout, delCount
const conn = interconnect.instance(),
    dataKey = 'keys'
//密钥类
class key {
    constructor(key, name, usr = '') {
        this.name = name
        this.usr = usr
        this.key = key
        this.upd()
    }
    upd() {
        this.otp = TOTP(this.key)
    }
    toString() {
        return `{"name":"${this.name}","usr":${this.usr},"key":${this.key}}`
    }
}
export default {
    private: {
        ab: false,
        list: [ /* new key("website","website",'account') */ ],
        more_show: false,
        more: null,
        timelast: 0,
        timeProgress: 0,
    },
    onInit() {
        storage.get({
            key: dataKey,
            success: (data) => {
                if (data) {
                    //prompt.showToast({message:data,duration: 2000})
                    data = JSON.parse(data)
                    data.list.forEach((e) => this.list.push(new key(e.key, e.name, e.usr)))
                }
            }
        })
        conn.onmessage = (data) => {
            try {
                let d = JSON.parse(data.data).list
                d.forEach((e) => {
                    let index = this.list.findIndex((a) => e.key == a.key)
                    if (index != -1) { //当密钥重复时刷新名字
                        this.list[index].name = e.name
                        this.list[index].usr = e.usr
                    } else {
                        this.list.push(new key(e.key, e.name, e.usr))
                    }
                })
                this.save()
            } catch (error) {
                prompt.showToast({
                    message: error.toString(),
                    duration: 2000
                })
            }
        }

    },
    i() { //关于
        this.ab = true
    },
    info(i) { //更多
        nowi = i
        this.more = this.list[i]
        this.more_show = true
    },
    exit(a) { //返回
        if (a.direction == 'right' || a == "e") {
            if (this.ab || this.more_show) {
                this.more_show = this.ab = false
            } else this.$app.exit()
        }
    },
    onBackPress() {
        this.exit("e")
        return true
    },
    save() { //保存
        let save = {
            list: this.list
        }
        storage.set({
            key: dataKey,
            value: JSON.stringify(save)
        })
    },
    onShow() { //亮屏时刷新防止死亡
        clearInterval(timeInterval)
        clearInterval(keyInterval)
        this.list.forEach((e) => e.upd())
        var ms2NextSecond = 1000 - (Date.now() % 1000);
        setTimeout(() => keyInterval = setInterval(() => {
            var ttl = Math.floor(Date.now() / 1000 % 30);
            if (ttl === 0) {
                this.list.forEach((e) => e.upd())
            }
            this.timelast = 30 - ttl
        }, 1000), ms2NextSecond);
        timeInterval = setInterval(() => {
            this.timeProgress = (30000 - Date.now() % 30000) / 300
        }, 10);
    },
    del() { //删除
        clearTimeout(delTimeout)
        if (!delCount) {
            delCount = true
            delTimeout = setTimeout(() => delCount = false, 500)
            prompt.showToast({
                message: "双击确认删除"
            })
            return
        }
        this.list.splice(nowi, 1);
        this.more_show = false
        this.save()
        prompt.showToast({
            message: "删除成功"
        })
    }
}
</script>
<style>
.bg{
  position: absolute;
  width: 192px;
  height: 490px;
  background-color: black;
}
text{
  font-size: 30px;
  font-weight: bold;
  color: #FFFFFF;
  text-align:center
}
.btn{
  width: 60px;
  height: 60px;
  border-radius: 99px;
  background-color: #262626;
  border: 3px solid rgba(255, 255, 255, 0.06);
}
</style>